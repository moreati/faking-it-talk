#+TITLE: Faking It
#+DATE: Thursday 23 July 2015
#+AUTHOR: Richard Wall (@wallrj)
#+EMAIL: richard.wall@clusterhq.com
#+REVEAL_THEME: night
#+REVEAL_TRANS: linear
#+REVEAL-SLIDE-NUMBER: t
#+OPTIONS: timestamp:nil author:nil num:nil toc:nil reveal_rolling_links:nil
#+OPTIONS: reveal_history:t

* Introduction

  * Problems
  * Solution
  * Questions

* Problem 1: Proliferation of mocks

  #+BEGIN_QUOTE
  Everyone made their own mock objects.
  We had N different implementations of a mock.
  When the real code changed, you have to find all N mocks and update them.
  #+END_QUOTE

  http://pyvideo.org/video/629/stop-mocking-start-testing

  #+BEGIN_NOTES
  * PyCon 2012
  * Augie Fackler
  * Nathaniel Manista
  * Ned Batchelder
  * Examples?
  #+END_NOTES

** Twisted (for example)

  #+BEGIN_SRC sh
  $ egrep --no-filename --only-matching --recursive 'class Fake[^(:]+' * \
    | sort \
    | uniq -c
    | sort -n
  #+END_SRC

  #+BEGIN_NOTES
  * Let's pick on Twisted
  #+END_NOTES

** Twisted (for example)
  #+BEGIN_SRC sh
  ...
      2 class FakeScheduler
      2 class FakeSentence
      2 class FakeSocket
      2 class FakeStdio
      2 class FakeWarning
      3 class FakeService
      4 class FakeFile
      5 class FakeResolver
      5 class FakeStream
      5 class FakeTransport
      6 class FakeReactor
      7 class FakeProtocol
  #+END_SRC

  #+BEGIN_NOTES
  * Doesn't show the paths
  * Duplicate Fakes in the same file!
  * ...But this may not be fair.
  #+END_NOTES

* Problem 2: Inaccurate mocks

** Examples:

  #+BEGIN_NOTES
  * Partial API
  * Method signature differences
  * OpenStack
  #+END_NOTES


* Choose a library

  While preparing for talk I went in search of examples of other people looking for verified fakes.
  Something close to home.
  Flocker calls the Docker API using ``docker-py``

* docker-py

  A Python wrapper around the Docker REST API.

* How do they test their API / interface?

  A mock HTTP server, plus
  Canned REST responses

* Where is the docker-py API defined?

  * Is it formally defined?
  * Look at the API documentation....

* Interface is documented...manually

** https://docker-py.readthedocs.org/en/stable/api/

** docs/api.md

* So, has anyone else had this thought?
** Yes!
** https://github.com/docker/docker-py/issues/109
** "Provide a Mock implementation"

   Well they call it a "Mock" -- I'd call it a verified fake.

* So let's make a start

* (master =)[~/projects/docker-py]$ git checkout -b fake-dockerclient-109

* IDockerClient

  Start with the interface
  Use ``zope.interface`` (ABCs ??)
  It's just what I'm used to.

* And a test to go with it.

  And ``zope.interface`` provides tools that'll help me to verify that my implementations match the interface.
  ``zope.interface.verify``
  ``verifyObject``
  ``verifyClass``

* Skeleton / Boilerplate

  So here's where we tend to start when doing this at ClusterHQ...

  Start with the tests....TDD!

  Our first test...in summary.

```
+    def test_interface(self):
+        """
+        The implementation provides ``IDockerClient``.
+        """
+        self.assertTrue(verifyObject(IDockerClient, self.client))

```

  This test uses the ``zope.interface.verify`` verfiy tools to check that the
  ``client`` (an instance) is a correct implementation of the interface.

  Later we'll see exactly where and how these tests are defined...
  So they can be run against the real and fake implementations of IDockerClient...
  But for now, let's concentrate on the results...

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_interface ...                                                  [ERROR]
tests.test
  FakeDockerClientTests
    test_interface ...                                                  [ERROR]
```

```
===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/usr/lib64/python2.7/unittest/case.py", line 367, in run
    testMethod()
  File "/home/richard/projects/docker-py/docker/testtools.py", line 35, in test_interface
    self.assertTrue(verifyObject(IDockerClient, self.client))
  File "/home/richard/.virtualenvs/docker-py/lib/python2.7/site-packages/zope/interface/verify.py", line 105, in verifyObject
    return _verify(iface, candidate, tentative, vtype='o')
  File "/home/richard/.virtualenvs/docker-py/lib/python2.7/site-packages/zope/interface/verify.py", line 50, in _verify
    raise DoesNotImplement(iface)
zope.interface.exceptions.DoesNotImplement: An object does not implement interface <InterfaceClass docker.client.IDockerClient>

tests.integration_test.RealDockerClientTests.test_interface
tests.test.FakeDockerClientTests.test_interface
-------------------------------------------------------------------------------
Ran 2 tests in 0.043s

FAILED (errors=2)
```

* Failed!

  But that was expected and...
  it gives us somewhere to start

* Easy enough to fix that

  All we need to do is decorate the ``docker.Client`` class.

```
commit 0c4b71fef273e92afc75a2e29fb77c3348bc142e
Author: Richard Wall <richard@the-moon.net>
Date:   Sat Jul 11 14:12:13 2015 +0100

    Implement the new interface

diff --git a/docker/client.py b/docker/client.py
index 349dbb2..44d7dd5 100644
--- a/docker/client.py
+++ b/docker/client.py
@@ -20,7 +20,7 @@ from datetime import datetime

 import six

-from zope.interface import Interface
+from zope.interface import Interface, implementer

 from . import clientbase
 from . import constants
@@ -35,6 +35,7 @@ class IDockerClient(Interface):
     """


+@implementer(IDockerClient)
 class Client(clientbase.ClientBase):
     @check_resource
     def attach(self, container, stdout=True, stderr=True,
```

  Note, that we haven't really done anything yet and
  that the interface doesn't accurately reflect the existing API.
  But we've made a test pass and it gives a sense of progress.

* Tests now pass

```
(docker-py)(fake-dockerclient-109 ?)[~/projects/docker-py]$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_interface ...                                                     [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.042s

PASSED (successes=2)
```

* A quick look at the test infrastructure.

  A testtools module.
  A public module, which can be easily imported by consumers,
  not hidden beside the tests where it may not be importable
  Tests defined in a test "mixin"
  A TestCase factory...
  a function that accepts an implementation factory...
  a function that can be called to generate an instance of the implementation
  returns a TestCase instance
  whose tests will operate on the generated instance.
  Build a ``TestCase`` subclass with a ``setUp`` method that calls the implementation factory.
  Naming convention...``make_idockerclient_tests``
  Signature convention...``make_idockerclient_tests(dockerclient_factory=...)``

  And with that, we can build TestCase's for the real implementation
  Which lives in `tests.functional`
  And for the fake implementation which live in `tests`

  And by defining a class that inherits from the dynamically generated TestCase,
  We have a convenient place to add test documentation strings.

* dockerclient_factory

  This provides a convenient place to set up a real ``docker.Client`` that calls a real Docker daemon.
  A place to set up ``docker.Client`` that interacts with a fake Docker daemon.
  And a place to set up a ``FakeDockerClient`` configured so that it can be exercised by the tests.

* And now we can start fleshing out the interface...

  So with the skeleton code in place and
  a mechanism for running the tests against the real and fake implementations
  we can start filling in the missing interface methods and
  missing method arguments.

* Start with ``containers``

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ git diff
diff --git a/docker/client.py b/docker/client.py
index 44d7dd5..6f128db 100644
--- a/docker/client.py
+++ b/docker/client.py
@@ -33,6 +33,12 @@ class IDockerClient(Interface):
     """
     Create, delete and list docker containers.
     """
+    def containers():
+        """
+        List containers. Identical to the ``docker ps`` command.
+
+        https://docker-py.readthedocs.org/en/latest/api/#containers
+        """


 @implementer(IDockerClient)
```

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_interface ...                                                  [ERROR]

===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/usr/lib64/python2.7/unittest/case.py", line 367, in run
    testMethod()
  File "/home/richard/projects/docker-py/docker/testtools.py", line 37, in test_interface
    self.assertTrue(verifyObject(IDockerClient, self.client))
  File "/home/richard/.virtualenvs/docker-py/lib/python2.7/site-packages/zope/interface/verify.py", line 105, in verifyObject
    return _verify(iface, candidate, tentative, vtype='o')
  File "/home/richard/.virtualenvs/docker-py/lib/python2.7/site-packages/zope/interface/verify.py", line 62, in _verify
    raise BrokenImplementation(iface, name)
zope.interface.exceptions.BrokenImplementation: An object has failed to implement interface <InterfaceClass docker.client.IDockerClient>

        The containers attribute was not provided.


tests.test.FakeDockerClientTests.test_interface
-------------------------------------------------------------------------------
Ran 2 tests in 0.040s

FAILED (errors=1, successes=1)
```

* And we'll start with a test for empty list of containers.

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ git diff
diff --git a/docker/testtools.py b/docker/testtools.py
index 5e536f7..c622e0c 100644
--- a/docker/testtools.py
+++ b/docker/testtools.py
@@ -24,6 +24,8 @@ class FakeDockerClient(object):
     """
     An in-memory implementation of ``IDockerClient``.
     """
+    def containers(self):
+        return []


 class IDockerClientTestsMixin(object):
@@ -36,6 +38,13 @@ class IDockerClientTestsMixin(object):
         """
         self.assertTrue(verifyObject(IDockerClient, self.client))

+    def test_containers_empty(self):
+        """
+        ``IDockerContainers.containers`` returns an empty list if there are no
+        running containers.
+        """
+        self.assertEqual([], self.client.containers())
+

 def make_idockerclient_tests(dockerclient_factory):
     """
```

* Hmm Docker API versions

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_containers_empty ...                                           [ERROR]
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_containers_empty ...                                              [OK]
    test_interface ...                                                     [OK]

===============================================================================
[ERROR]
Traceback (most recent call last):
  File "/usr/lib64/python2.7/unittest/case.py", line 367, in run
    testMethod()
  File "/home/richard/projects/docker-py/docker/testtools.py", line 46, in test_containers_empty
    self.assertEqual([], self.client.containers())
  File "/home/richard/projects/docker-py/docker/client.py", line 211, in containers
    res = self._result(self._get(u, params=params), True)
  File "/home/richard/projects/docker-py/docker/clientbase.py", line 106, in _result
    self._raise_for_status(response)
  File "/home/richard/projects/docker-py/docker/clientbase.py", line 102, in _raise_for_status
    raise errors.APIError(e, response, explanation=explanation)
docker.errors.APIError: 404 Client Error: Not Found ("client and server don't have same version (client : 1.19, server: 1.17)")

tests.integration_test.RealDockerClientTests.test_containers_empty
-------------------------------------------------------------------------------
Ran 4 tests in 0.059s

FAILED (errors=1, successes=3)
```

* Specify 'auto' to use the API version provided by the server.
** ok

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ git diff
diff --git a/tests/integration_test.py b/tests/integration_test.py
index c9d0f0c..60cde8e 100644
--- a/tests/integration_test.py
+++ b/tests/integration_test.py
@@ -14,6 +14,7 @@

 import base64
 import contextlib
+from functools import partial
 import json
 import io
 import os
@@ -1480,7 +1481,9 @@ class TestRegressions(BaseTestCase):


 class RealDockerClientTests(
-        make_idockerclient_tests(dockerclient_factory=docker.Client)
+        make_idockerclient_tests(
+            dockerclient_factory=partial(docker.Client, version='auto')
+        )
 ):
     """
     Tests for ``docker.Client`` adherence to ``IDockerClient``.
```

```
(docker-py)(fake-dockerclient-109 ✕?)[~/projects/docker-py]$ git commit -am "Automatically determine the docker server version"
[fake-dockerclient-109 ba3b144] Automatically determine the docker server version
 1 file changed, 4 insertions(+), 1 deletion(-)
```

```
(docker-py)(fake-dockerclient-109 ?)[~/projects/docker-py]$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_containers_empty ...                                              [OK]
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_containers_empty ...                                              [OK]
    test_interface ...                                                     [OK]

-------------------------------------------------------------------------------
Ran 4 tests in 0.079s

PASSED (successes=4)
```

* What next?

* create_container
** Creates a container but doesn't start it.
** Our ``containers`` API currently only returns running containers, so we'll need to modify it a little.
** We can implement a test that creates both of these behaviours.
** Creates and lists the newly created container.
** ``docker.Client.create_container`` and ``containers`` have masses of arguments (too many??) but we'll start with the bare minimum; add only what we need to the interface.

* Chicken-and-egg
** Can't test ``create_container`` until we've got a ``containers`` API that lists both running and non-running containers
** Can't easily / generally test ``containers(all=True)`` until we've implemented ``create_container``
** Implement both together.
**

* Case Study

* IDockerClientAPI

* IBlockDeviceAPI

*

* Summary

* Questions?

* Thanks and links
  * Richard Wall: https://github.com/wallrj
  * ClusterHQ: https://github.com/ClusterHQ
